import unittest
import time

audio_path = "VisualRadio\\MyTest\\test.flac"

def stt_google():
    # import speech_recognition as sr
    from google.oauth2 import service_account # 구글 클라우드 인증설정
    from google.cloud import storage, speech_v1
    from google.oauth2 import service_account
    import os
    import datetime
    import json
    global audio_path

    project_id = 'RadioProject'
    credentials = service_account.Credentials.from_service_account_file('D:\JP\Server\VisualRadio\credentials.json')
    client = speech_v1.SpeechClient(credentials=credentials)
    storage_client = storage.Client(project=project_id, credentials=credentials)
    bucket_name = 'radio_bucket'
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(os.path.basename(audio_path))
    blob.upload_from_filename(audio_path)
    storage_file_path = f'gs://{bucket_name}/{blob.name}'
    audio = speech_v1.RecognitionAudio(uri=storage_file_path)
    config = speech_v1.RecognitionConfig(
        language_code='ko-KR',
    )
    operation = client.long_running_recognize(config=config, audio=audio)
    response = operation.result(timeout=999999)
    results = response.results
    start_time_delta = datetime.timedelta(hours=0, minutes=0, seconds=0, microseconds=0)
    m, s = divmod(start_time_delta.seconds, 60)
    start_time_formatted = "{:d}:{:02d}.{:03d}".format(m, s, start_time_delta.microseconds)

    filename = "VisualRadio/MyTest/results/stt_google.json"
    if os.path.exists(filename):
        os.remove(filename)

    scripts = []
    for result in results:
        alternative = result.alternatives[0]  
        new_data = {'time': start_time_formatted, 'txt': alternative.transcript}
        scripts.append(json.dumps(new_data, ensure_ascii=False))
        # start time 갱신
        start_time_delta = result.result_end_time
        m, s = divmod(start_time_delta.seconds, 60)
        start_time_formatted = "{:d}:{:02d}.{:03d}".format(m, s, start_time_delta.microseconds)
    end_time = str(get_flac_duration(audio_path))
    data = {'end_time':end_time, 'scripts':[json.loads(s) for s in scripts]}
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f,  ensure_ascii=False)


def get_flac_duration(filepath):
    from pydub import AudioSegment
    audio = AudioSegment.from_file(filepath, format="flac")
    duration_micros = int(audio.duration_seconds * 1000000)
    minutes, seconds = divmod(duration_micros / 1000000, 60)
    microseconds = duration_micros % 1000
    return "{:d}:{:02d}.{:03d}".format(int(minutes), int(seconds), microseconds)


def stt_whisper():
    import subprocess
    global audio_path
    output_path = "VisualRadio/MyTest/results/"
    proc = subprocess.Popen(['VisualRadio\MyTest\whisper.bat', audio_path, output_path], shell=True)  # Windows 배치 파일 실행 예시
    proc.wait()


class TestSTT(unittest.TestCase):
    
    def test_stt_google(self):
        print("\n[google] let's go!")
        start_time = time.time()
        stt_google()
        end_time = time.time()
        elapsed_time = end_time - start_time
        print(f"stt_google 수행시간: {elapsed_time}초")
        print("[google] finished.\n")

        
    # def test_stt_whisper(self):
    #     print("\n[whisper] let's go!")
    #     start_time = time.time()
    #     stt_whisper()
    #     end_time = time.time()
    #     elapsed_time = end_time - start_time
    #     print(f"stt_whisper 수행시간: {elapsed_time}초")
    #     print("[whisper] finished.\n")
        
if __name__ == '__main__':
    unittest.main()
